"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

import logging
from datetime import datetime
from typing import Dict, Any, Optional
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from .llm_client import get_llm_client

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
dialog_states: Dict[int, Dict[str, Any]] = {}

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


def get_dialog_state(chat_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞."""
    if chat_id not in dialog_states:
        dialog_states[chat_id] = {
            'stage': 'greeting',
            'answers': {},
            'last_llm_suggestion': '',
            'started_at': datetime.now().isoformat()
        }
    return dialog_states[chat_id]


def is_returning_user(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–º (–µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è)."""
    if chat_id not in dialog_states:
        return False
    
    state = dialog_states[chat_id]
    current_stage = state.get('stage', 'greeting')
    
    # –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    return current_stage not in ['done', 'greeting']


def get_continuation_message(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    state = get_dialog_state(chat_id)
    current_stage = state.get('stage', 'greeting')
    
    if current_stage == 'qualifying':
        answers = state.get('answers', {})
        if 'intent' not in answers:
            return "–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à—É –±–µ—Å–µ–¥—É! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        elif 'budget' not in answers:
            return "–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?"
        elif 'timeline' not in answers:
            return "–ö–æ–≥–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?"
        elif 'priority' not in answers:
            return "–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?"
    
    elif current_stage == 'offering':
        return "–•–æ—Ç–µ–ª–∏ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?"
    
    elif current_stage == 'collecting_contact':
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏."
    
    return "–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à—É –±–µ—Å–µ–¥—É!"


def update_dialog_stage(chat_id: int, stage: str) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    state = get_dialog_state(chat_id)
    state['stage'] = stage
    logging.info("–î–∏–∞–ª–æ–≥ chat_id=%s –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞–¥–∏—é: %s", chat_id, stage)


def save_answer(chat_id: int, question: str, answer: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    state = get_dialog_state(chat_id)
    state['answers'][question] = answer
    logging.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç chat_id=%s: %s = %s", chat_id, question, answer[:50])


@router.message(Command("start"))
async def handle_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–º
    if is_returning_user(chat_id):
        logging.info("/start –æ—Ç –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è chat_id=%s", chat_id)
        
        continuation_text = get_continuation_message(chat_id)
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! {continuation_text}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
        state = get_dialog_state(chat_id)
        current_stage = state.get('stage', 'greeting')
        
        if current_stage == 'qualifying':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù—É–∂–µ–Ω —Å–∞–π—Ç"), KeyboardButton(text="–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
                    [KeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"), KeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
                ],
                resize_keyboard=True,
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π:", reply_markup=kb)
        elif current_stage == 'offering':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞, –æ—Å—Ç–∞–≤–ª—é –∫–æ–Ω—Ç–∞–∫—Ç"), KeyboardButton(text="–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤")],
                ],
                resize_keyboard=True,
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb)
        # –î–ª—è collecting_contact –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∂–¥–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        dialog_states[chat_id] = {
            'stage': 'greeting',
            'answers': {},
            'last_llm_suggestion': '',
            'started_at': datetime.now().isoformat()
        }
        
        logging.info("/start –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è chat_id=%s", chat_id)
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ IT-—É—Å–ª—É–≥–∏.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? "
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–µ–Ω –ª–∏ –≤–∞–º —Å–∞–π—Ç, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?"
        )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù—É–∂–µ–Ω —Å–∞–π—Ç"), KeyboardButton(text="–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")],
                [KeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"), KeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            ],
            resize_keyboard=True,
        )
        
        await message.answer(welcome_text, reply_markup=kb)
        update_dialog_stage(chat_id, 'qualifying')


@router.message(Command("ping"))
async def handle_ping(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping."""
    logging.info("/ping –æ—Ç chat_id=%s", message.chat.id)
    await message.answer("pong")


@router.message(Command("reset"))
async def handle_reset(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞."""
    chat_id = message.chat.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    dialog_states[chat_id] = {
        'stage': 'greeting',
        'answers': {},
        'last_llm_suggestion': '',
        'started_at': datetime.now().isoformat()
    }
    
    logging.info("/reset –æ—Ç chat_id=%s", chat_id)
    await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")


@router.message(Command("ask"))
async def handle_ask(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask <–≤–æ–ø—Ä–æ—Å>."""
    question = message.text[5:].strip()  # –£–±–∏—Ä–∞–µ–º "/ask " –∏–∑ –Ω–∞—á–∞–ª–∞
    
    if not question:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    
    logging.info("/ask –æ—Ç chat_id=%s, –¥–ª–∏–Ω–∞_–≤–æ–ø—Ä–æ—Å–∞=%d", message.chat.id, len(question))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await message.answer("ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    
    try:
        llm_client = get_llm_client()
        answer = await llm_client.ask_question(question)
        await message.answer(answer)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /ask: %s", str(e))
        from .prompt import FALLBACK_MESSAGE
        await message.answer(FALLBACK_MESSAGE)


@router.message()
async def handle_any_message(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞."""
    chat_id = message.chat.id
    user_text = message.text.strip()
    
    if not user_text:
        return
    
    state = get_dialog_state(chat_id)
    current_stage = state['stage']
    
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id=%s, —Å—Ç–∞–¥–∏—è=%s, —Ç–µ–∫—Å—Ç=%s", 
                chat_id, current_stage, user_text[:50])
    
    if current_stage == 'greeting':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        await handle_start(message)
        
    elif current_stage == 'qualifying':
        # –°—Ç–∞–¥–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –∑–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        await handle_qualifying_stage(message, user_text)
        
    elif current_stage == 'offering':
        # –°—Ç–∞–¥–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª—É–≥
        await handle_offering_stage(message, user_text)
        
    elif current_stage == 'collecting_contact':
        # –°—Ç–∞–¥–∏—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await handle_contact_stage(message, user_text)
        
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        await handle_start(message)


async def handle_qualifying_stage(message: types.Message, user_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –∑–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
    chat_id = message.chat.id
    state = get_dialog_state(chat_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    if 'intent' not in state['answers']:
        save_answer(chat_id, 'intent', user_text)
        
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = (
            "–ü–æ–Ω—è—Ç–Ω–æ! –ê –∫–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç? "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
        )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ 100,000 —Ä—É–±"), KeyboardButton(text="100,000 - 300,000 —Ä—É–±")],
                [KeyboardButton(text="300,000 - 500,000 —Ä—É–±"), KeyboardButton(text="–°–≤—ã—à–µ 500,000 —Ä—É–±")],
            ],
            resize_keyboard=True,
        )
        
        await message.answer(next_question, reply_markup=kb)
        
    elif 'budget' not in state['answers']:
        save_answer(chat_id, 'budget', user_text)
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Å—Ä–æ–∫–∞—Ö
        next_question = (
            "–û—Ç–ª–∏—á–Ω–æ! –ê –∫–æ–≥–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç? "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É."
        )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞"), KeyboardButton(text="1-2 –º–µ—Å—è—Ü–∞")],
                [KeyboardButton(text="2-3 –º–µ—Å—è—Ü–∞"), KeyboardButton(text="–ù–µ —Å–ø–µ—à—É")],
            ],
            resize_keyboard=True,
        )
        
        await message.answer(next_question, reply_markup=kb)
        
    elif 'timeline' not in state['answers']:
        save_answer(chat_id, 'timeline', user_text)
        
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ/–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö
        next_question = (
            "–ü–æ–Ω—è—Ç–Ω–æ! –ê —á—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ? "
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"
        )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"), KeyboardButton(text="–ö–∞—á–µ—Å—Ç–≤–æ")],
                [KeyboardButton(text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω"), KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")],
                [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
            ],
            resize_keyboard=True,
        )
        
        await message.answer(next_question, reply_markup=kb)
        
    elif 'priority' not in state['answers']:
        save_answer(chat_id, 'priority', user_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–¥–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        update_dialog_stage(chat_id, 'offering')
        await handle_offering_stage(message, user_text)


async def handle_offering_stage(message: types.Message, user_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª—É–≥."""
    chat_id = message.chat.id
    state = get_dialog_state(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
    try:
        llm_client = get_llm_client()
        
        from .prompt import RECOMMENDATION_PROMPT
        
        context = f"""
        –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {state['answers'].get('intent', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ë—é–¥–∂–µ—Ç: {state['answers'].get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        –°—Ä–æ–∫–∏: {state['answers'].get('timeline', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {state['answers'].get('priority', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        question = f"{RECOMMENDATION_PROMPT}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n{context}"
        recommendation = await llm_client.ask_question(question)
        
        state['last_llm_suggestion'] = recommendation
        
        response = (
            f"üìã –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
            f"{recommendation}\n\n"
            f"–•–æ—Ç–µ–ª–∏ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?"
        )
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞, –æ—Å—Ç–∞–≤–ª—é –∫–æ–Ω—Ç–∞–∫—Ç"), KeyboardButton(text="–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤")],
            ],
            resize_keyboard=True,
        )
        
        await message.answer(response, reply_markup=kb)
        update_dialog_stage(chat_id, 'collecting_contact')
        
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %s", str(e))
        from .prompt import FALLBACK_MESSAGE
        await message.answer(FALLBACK_MESSAGE)
        update_dialog_stage(chat_id, 'collecting_contact')


async def handle_contact_stage(message: types.Message, user_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    chat_id = message.chat.id
    
    if user_text.lower() in ['–¥–∞', '–¥–∞, –æ—Å—Ç–∞–≤–ª—é –∫–æ–Ω—Ç–∞–∫—Ç', '–¥–∞, –æ—Å—Ç–∞–≤–ª—é']:
        contact_request = (
            "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ Telegram username\n"
            "‚Ä¢ Email\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏."
        )
        
        await message.answer(contact_request)
        
    elif user_text.lower() in ['–Ω–µ—Ç', '–ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤', '–Ω–µ –≥–æ—Ç–æ–≤']:
        farewell = (
            "–ü–æ–Ω—è—Ç–Ω–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start "
            "–¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –£–¥–∞—á–∏! üòä"
        )
        
        await message.answer(farewell)
        update_dialog_stage(chat_id, 'done')
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
        save_answer(chat_id, 'contact', user_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ CSV
        try:
            from .lead_store import get_lead_store
            
            lead_store = get_lead_store()
            success = lead_store.save_lead_from_dialog(
                chat_id=chat_id,
                dialog_state=state,
                contact=user_text,
                client_name=""  # –ò–º—è –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            )
            
            if success:
                success_message = (
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
                    "–¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
                )
                logging.info("–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ CSV: chat_id=%s", chat_id)
            else:
                success_message = (
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.\n\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
                )
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–¥ –≤ CSV: chat_id=%s", chat_id)
                
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–¥–∞: %s", str(e))
            success_message = (
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.\n\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
            )
        
        await message.answer(success_message)
        update_dialog_stage(chat_id, 'done')
        
        logging.info("–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–±—Ä–∞–Ω –æ—Ç chat_id=%s: %s", chat_id, user_text[:50])
